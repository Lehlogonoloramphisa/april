<?php

namespace App\Http\Controllers\Web;

use Illuminate\Http\Request as ValidatorRequest;
use App\Http\Controllers\Controller;
use App\Models\Payment\OwnerWallet;
use App\Models\Payment\OwnerWalletHistory;
use App\Transformers\Payment\OwnerWalletTransformer;
use App\Jobs\Notifications\SendPushNotification;
use App\Models\Payment\UserWalletHistory;
use App\Models\Payment\DriverWalletHistory;
use App\Transformers\Payment\WalletTransformer;
use App\Transformers\Payment\DriverWalletTransformer;
use App\Models\Payment\UserWallet;
use App\Models\Payment\DriverWallet;
use App\Base\Constants\Masters\WalletRemarks;
use App\Base\Constants\Auth\Role;
use App\Models\Request\Request as RequestModel;
use App\Models\User;
use Kreait\Firebase\Contract\Database;
use Stripe\Stripe;
use Stripe\Checkout\Session;

class StripeController extends Controller
{
    protected $database;

    public function __construct(Database $database)
    {
        $this->database = $database;
    }

    public function stripe(ValidatorRequest $request)
    {
        $amount = $request->input('amount') * 100;
        $payment_for = $request->input('payment_for');
        $user_id = $request->input('user_id');
        $request_id = $request->input('request_id');

        $user = User::find($user_id);
        $currency = $user->countryDetail->currency_code ?? "INR";

        return view('stripe.stripe', compact('amount', 'payment_for', 'currency', 'user_id', 'request_id'));
    }

    public function stripeCheckout(ValidatorRequest $request)
    {
        \Stripe\Stripe::setApiKey(config('stripe.sk'));
    
        $productname = $request->get('productname');
        $payment_for = $request->get('payment_for');
        $currency = $request->get('currency');
        $amount = $request->get('amount');
        $user_id = $request->get('user_id');
        $request_id = $request->get('request_id');
$total = "$amount * 100";    
        $session = \Stripe\Checkout\Session::create([
            'line_items' => [
                [
                    'price_data' => [
                        'currency' => $currency,
                        'product_data' => ['name' => $productname],
                        'unit_amount' => $amount,
                    ],
                    'quantity' => 1,
                ],
            ],
            'mode' => 'payment',
            'success_url' => route('stripeCheckoutSuccess', [
                'productname' => $productname,
                'payment_for' => $payment_for,
                'currency' => $currency,
                'amount' => $amount,
                'user_id' => $user_id,
                'request_id' => $request_id,
            ]),
            'cancel_url' => route('stripeCheckoutError'),
        ]);
    
        return redirect()->away($session->url);
    }
    

    public function stripeCheckoutSuccess(ValidatorRequest $request)
    {
        $payment_for = $request->get('payment_for');
        $currency = $request->get('currency');
        $amount = $request->get('amount');
        $user_id = $request->get('user_id');
        $request_id = $request->get('request_id');
        $user = User::find($user_id);

        if ($payment_for == "wallet") {
            if ($user->hasRole('user')) {
                $wallet_model = new UserWallet();
                $wallet_add_history_model = new UserWalletHistory();
            } elseif ($user->hasRole('driver')) {
                $wallet_model = new DriverWallet();
                $wallet_add_history_model = new DriverWalletHistory();
            } else {
                $wallet_model = new OwnerWallet();
                $wallet_add_history_model = new OwnerWalletHistory();
            }

            $user_wallet = $wallet_model::firstOrCreate(['user_id' => $user_id]);
            $user_wallet->amount_added += $amount;
            $user_wallet->amount_balance += $amount;
            $user_wallet->save();

            $wallet_add_history_model::create([
                'user_id' => $user_id,
                'amount' => $amount,
                'transaction_id' => $request->PayerID,
                'remarks' => WalletRemarks::MONEY_DEPOSITED_TO_E_WALLET,
                'is_credit' => true,
            ]);

            $title = trans('push_notifications.amount_credited_to_your_wallet_title');
            $body = trans('push_notifications.amount_credited_to_your_wallet_body');
            dispatch(new SendPushNotification($user, $title, $body));
        } else {
            $request_detail = RequestModel::find($request_id);
//            $request_detail->update(['is_paid' => true]);
  //
return response()->json(['status' => 'success', 'message' => 'Payment successful']);return response()->json(['status' => 'success', 'message' => 'Payment successful']);
//          $this->database->getReference('requests/' . $request_detail->id)->update(['is_paid' => 1]);
        }

        return response()->json(['status' => 'success', 'message' => 'Payment successful']);
    }

    public function stripeCheckoutError(ValidatorRequest $request)
    {
        return response()->json(['status' => 'failure', 'message' => 'Payment failed']);
    }
}
